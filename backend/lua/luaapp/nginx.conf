#load_module /usr/lib/nginx/modules/ngx_http_lua_module.so;

env PG_HOST;
env PG_PORT;
env PG_USER;
env PG_PASS;
env PG_DB;

worker_processes 1;

events {worker_connections 1024;}

http {
    server {
        root /var/www/html;

        listen ${PORT};
        server_name localhost 127.0.0.1;

        location /test {
            default_type application/json;
            add_header Content-Type application/json;
            return 200 '{"name":"John", "age":30, "city":"New York"}';
        }

        # exact matches only:
        location = /users {
            default_type application/json;
            add_header Content-Type application/json;
            content_by_lua_block {
                local pgmoon = require("pgmoon")
                local cjson = require("cjson")
                local pg = pgmoon.new({
                    host = os.getenv("PG_HOST"),
                    port = os.getenv("PG_PORT"),
                    database = os.getenv("PG_DB"),
                    user = os.getenv("PG_USER"),
                    password = os.getenv("PG_PASS")
                })

                local request_method = ngx.var.request_method
                local user_id = ngx.var[1]

                ngx.log(ngx.ERR, "Request method: ", request_method)
                ngx.log(ngx.ERR, "Request URI: ", ngx.var.request_uri)
                ngx.log(ngx.ERR, "Request body: ", ngx.var.request_body)

                ngx.log(ngx.ERR, "USER ID:", user_id)

                if request_method == "POST" then
                    ngx.req.read_body()
                    local data = ngx.req.get_body_data()
                    local json = cjson.decode(data)
                    local success, err = pg:connect()
                    if not success then
                        ngx.say("failed to connect: ", err)
                        ngx.status = 500
                        return 500, err
                    end
                    local res, err = pg:query("INSERT INTO users (email) VALUES ('"..json.email.."')")
                    if not res then
                        ngx.say("bad result: ", err)
                        ngx.status = 500
                        return 500, err
                    end
                    ngx.say(cjson.encode(res))
                    pg:keepalive()
                    return
                end

                local success, err = pg:connect()
                if not success then
                    ngx.say("failed to connect: ", err)
                    ngx.status = 500
                    return 500, err
                end

                local res, err = pg:query("SELECT * FROM users")
                if not res then
                    ngx.say("bad result: ", err)
                    ngx.status = 500
                    return 500, err
                end

                ngx.say(cjson.encode(res))
                pg:keepalive()
            }
        }

        location ~ ^/users/([0-9]+)$ {
            default_type application/json;
            add_header Content-Type application/json;
            content_by_lua_block {
                local pgmoon = require("pgmoon")
                local cjson = require("cjson")
                local pg = pgmoon.new({
                    host = os.getenv("PG_HOST"),
                    port = os.getenv("PG_PORT"),
                    database = os.getenv("PG_DB"),
                    user = os.getenv("PG_USER"),
                    password = os.getenv("PG_PASS")
                })

                local request_method = ngx.var.request_method
                local user_id = ngx.var[1]

                ngx.log(ngx.ERR, "Request method: ", request_method)
                ngx.log(ngx.ERR, "Request URI: ", ngx.var.request_uri)
                ngx.log(ngx.ERR, "Request body: ", ngx.var.request_body)

                ngx.log(ngx.ERR, "USER ID:", user_id)

                if request_method == "GET" then
                    local success, err = pg:connect()
                    if not success then
                        ngx.say("failed to connect: ", err)
                        ngx.status = 500
                        return 500, err
                    end

                    local res, err = pg:query("SELECT * FROM users WHERE id = "..user_id)
                    if not res then
                        ngx.say("bad result: ", err)
                        ngx.status = 500
                        return 500, err
                    end

                    ngx.say(cjson.encode(res))
                    pg:keepalive()
                    return
                end

                if request_method == "PUT" then
                    ngx.req.read_body()
                    local data = ngx.req.get_body_data()
                    local json = cjson.decode(data)
                    local success, err = pg:connect()
                    if not success then
                        ngx.say("failed to connect: ", err)
                        ngx.status = 500
                        return 500, err
                    end

                    local res, err = pg:query("UPDATE users SET email = '"..json.email.."' WHERE id = "..user_id)
                    if not res then
                        ngx.say("bad result: ", err)
                        ngx.status = 500
                        return 500, err
                    end
                    if res.affected_rows == 0 then
                        ngx.status = 404
                        ngx.say("User not found")
                        return 404, "User not found"
                    end

                    ngx.say(cjson.encode(res))
                    pg:keepalive()
                    return
                end

                if request_method == "DELETE" then
                    local success, err = pg:connect()
                    if not success then
                        ngx.say("failed to connect: ", err)
                        ngx.status = 500
                        return 500, err
                    end

                    local res, err = pg:query("DELETE FROM users WHERE id = "..user_id)
                    if not res then
                        ngx.say("bad result: ", err)
                        ngx.status = 500
                        return 500, err
                    end

                    if res.affected_rows == 0 then
                        ngx.status = 404
                        ngx.say("User not found")
                        return 404, "User not found"
                    end

                    ngx.say(cjson.encode(res))
                    pg:keepalive()
                    return
                end
            }
        }
    }
}
